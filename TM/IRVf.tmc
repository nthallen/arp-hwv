%{
  class digdelay {
    public:
      digdelay(int delay);
      ~digdelay();
      double delay(double in);
      double delta(double in);
    private:
      double *data;
      int npts, next;
  };
  
  digdelay::digdelay(int delay) {
    nl_assert(delay > 0);
    npts = delay;
    data = (double *)new_memory(npts * sizeof(double));
    next = -1;
  }
  
  digdelay::~digdelay() {
    if (data) {
      free_memory(data);
      data = 0;
    }
  }
  
  double digdelay::delay(double in) {
    double rv;
    if (next < 0) {
      int i;
      for (i = 0; i < npts; ++i)
        data[i] = in;
      next = 0;
    }
    rv = data[next];
    data[next] = in;
    if (++next >= npts)
      next = 0;
    return rv;
  }
  
  double digdelay::delta(double in) {
    double in0 = delay(in);
    return in - in0;
  }
  
  class digfilter {
    public:
      digfilter(double samples);
      // ~digfilter();
      double filter(double in);
    private:
      double z1, a1, a2;
  };
  
  digfilter::digfilter(double samples) {
    z1 = 0.;
    a1 = 1+samples/3.14159;
    a2 = 1-samples/3.14159;
  }
  
  double digfilter::filter(double in) {
    double out = in/a1 + z1;
    z1 = in/a1 - a2*out/a1;
    return out;
  }
  
  digfilter IRVfilt(10);
  digdelay IRV(10);
  digfilter RFBWfilt(20);
  digdelay RFBWdly(30);
%}

TM typedef double IRV_VOLTS { text "%7.3lf"; }
IRV_VOLTS IRVf; invalidate IRVf;
IRV_VOLTS dIRVdt; invalidate dIRVdt;
IRV_VOLTS RFBWf; invalidate RFBWf;
IRV_VOLTS dRFBW; invalidate dRFBW;
{ IRVf = IRVfilt.filter(convert(A_IRV));
  dIRVdt = IRV.delta(IRVf);
  RFBWf = RFBWfilt.filter(convert(ARFBW));
  dRFBW = RFBWdly.delta(RFBWf);
  Validate IRVf;
  Validate dIRVdt;
  Validate RFBWf;
  Validate dRFBW;
}
